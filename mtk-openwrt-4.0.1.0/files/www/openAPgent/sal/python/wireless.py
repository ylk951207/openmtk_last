import os
from common.env import *
from common.misc import *
from common.file import*
from common.message import *
from common.sysinfo import *


WIRELESS_COMMON_CONFIG = "wireless_common_config"
WIRELESS_GENERATE_CONFIG  = "wireless_generate_config"
WIRELESS_SEARCH_CONFIG = "wireless_search_config"

PATH_WIRELESS_MEDIATEK='/etc/wireless/mediatek/'

MT7615_1_DAT="mt7615e.1.dat"
MT7622_1_DAT="mt7622.1.dat"
FIVE_GIGA_DEVICE_NAME = "MT7615.1"
TWO_GIGA_DEVICE_NAME = "MT7622.1"

FILE_HEADER_TEXT = "# Generated by mtkwifi.lua\nDefault\n"

'''
Wireless LAN setting type information list
'''
ap_type_list = ["5G_default", "5G_guest1", "5G_guest2", "2G_default", "2G_guest1","2G_guest2"]

'''
WPS enable is 7, disable is 0
'''
WPS_ENABLE_SIGNAL = "7"
WPS_DISABLE_SIGNAL = "0"

'''
Wireless 802.11 protocol supported mode 
'''
mode_data = {
        '802.11 b only': 1,
        '802.11 a only': 2,
        '802.11 g only': 4,
        '802.11 a/n in 5 band':8,
        '802.11 b/g/gn mode': 9,
        '802.11 b/g mixed': 0,
        '802.11 a/ac/an mixed': 14,
        '802.11 ac/an mixed':15
        }

'''
Wireless configuration GET, SET
'''
def py_wireless_config_list():
    wireless_body = list()

    for i in range(0, len(ap_type_list)):
        log_info(WIRELESS_COMMON_CONFIG, "[type] : " + ap_type_list[i])
        if_name, device_name, if_num = wireless_get_device_info(ap_type_list[i])
        if device_info_get_hwaddr(if_name) != '':
            rc = py_wireless_config_retrieve(ap_type_list[i], 0)
            if i == 0:
                wireless_body = [rc]
            else:
                wireless_body.append(rc)

    data = {
        "wireless-list": wireless_body,
        'header': {
            'resultCode': 200,
            'resultMessage': 'Success.',
            'isSuccessful': 'true'
        }
    }
    return data

def py_wireless_config_create(request):
    return wireless_config_set(request)

def py_wireless_config_update(request):
    return wireless_config_set(request)

def py_wireless_config_retrieve(ap_type, add_header):
    if_name, device_name, if_num = wireless_get_device_info(ap_type)

    if ap_type == "5G_default" or "5G_guest" in ap_type:
        data_file_name = MT7615_1_DAT
    elif ap_type == "2G_default" or "2G_guest" in ap_type:
        data_file_name = MT7622_1_DAT
    else:
        return response_make_simple_error_body(500, "Not found type", None)

    field_data_num = str(if_num+1)

    wireless_data = wireless_config_get(data_file_name, field_data_num)
    wireless_data['bssid'] = device_info_get_hwaddr(if_name)
    wireless_data['devName'] = device_name
    wireless_data['type'] = ap_type

    for key, val in wireless_data.items():
        '''
	    Gets the required value from a specific type of value.
	    (authMode, privacyMode, wps | data file type = a;b;c;d) 
	    '''
        if key == 'authMode' or key == 'privacyMode' or key == 'wps':
            if ';' in val:
                token = val.split(';')
                if len(token) == field_data_num:
                    filter_val = token[if_num].replace("\n", "")
                else:
                    filter_val = ""
            else:
                filter_val = val.replace("\n", "")
            wireless_data[key] = filter_val
        elif isinstance(val, str):
            filter_val = val.replace("\n","")
            wireless_data[key] = filter_val
        else:
            wireless_data[key] = val
    '''
    wps enable = 7 , disable = 0 | data file type = 7;0;0;7
    '''
    if wireless_data['wps'] == WPS_ENABLE_SIGNAL:
        wireless_data['wps'] = True
    elif wireless_data['wps'] == WPS_DISABLE_SIGNAL:
        wireless_data['wps'] = False

    wireless_data['mode'] = wireless_convert_number_to_mode_type(wireless_data['mode'])

    wireless_data['enable'] = device_get_wireless_state(if_name)
    status = device_get_wireless_state(if_name)
    if status == True:
        wireless_data['status'] = 'connected'
    else:
        wireless_data['status'] = 'disconnected'

    if add_header == 1:
        data = {
            "wireless": wireless_data,
            'header': {
                'resultCode': 200,
                'resultMessage': 'Success.',
                'isSuccessful': 'true'
            }
        }
    else:
        data = wireless_data
    return data

def py_wireless_config_detail_create(request, ap_type):
    return wireless_config_detail_set(request, ap_type)

def py_wireless_config_detail_update(request, ap_type):
    return wireless_config_detail_set(request, ap_type)

def py_wireless_search_list():
    pass


'''
file I/O
'''

def wireless_config_get(data_file_name, field_data_num):
    wireless_data = dict()
    file_config = ConfigFileProc(WIRELESS_COMMON_CONFIG, PATH_WIRELESS_MEDIATEK, data_file_name, field_data_num)
    if file_config.section_map == None:
        return response_make_simple_error_body(500, "Not found file config", None)

    file_config.get_file_data_section_map(DELIMITER_EQUEL)

    for map_key, map_val in file_config.section_map.items():
        wireless_data[map_key] = map_val[2]

    return wireless_data

def wireless_config_set(request):
    log_info(WIRELESS_COMMON_CONFIG, "request data = ", str(request))

    wireless_list = request['wireless-list']
    while len(wireless_list) > 0:
        wireless_field = wireless_list.pop(0)
        for ap_type in ap_type_list:
            if wireless_field['type'] == ap_type:
                wireless_config_detail_set(wireless_field, ap_type)

    data = {
        'header': {
            'resultCode': 200,
            'resultMessage': 'Success.',
            'isSuccessful': 'true'
        }
    }
    return data

def wireless_config_detail_set(request, ap_type):
    log_info(WIRELESS_COMMON_CONFIG, "request data = ", str(request))
    if not ap_type == request["type"]:
        return response_make_simple_error_body(500, "Not found request [type]", None)

    if_name, device_name, if_num = wireless_get_device_info(request["type"])

    field_data_num = str(if_num + 1)

    if device_name == FIVE_GIGA_DEVICE_NAME:
        config_file_name = MT7615_1_DAT

    elif device_name == TWO_GIGA_DEVICE_NAME:
        config_file_name = MT7622_1_DAT

    # if device_info_get_hwaddr(if_name) == '':
    #     wireless_add_new_field(config_file_name, field_data_num)

    '''
    wps enable = 7 , disable = 0 | data file type = 7;0;0;7
    '''
    if request['wps'] == True:
        request['wps'] = WPS_ENABLE_SIGNAL
    elif request['wps'] == False:
        request['wps'] = WPS_DISABLE_SIGNAL

    for req_key, req_val in request.items():
        if req_key == "authMode" or req_key == "privacyMode" or req_key == "wps":
            apply_req_val = wireless_convert_to_spcific_data_type(config_file_name, req_key, req_val, str(if_num))
            request[req_key] = apply_req_val

    file_config = ConfigFileProc(WIRELESS_COMMON_CONFIG, PATH_WIRELESS_MEDIATEK, config_file_name, field_data_num)
    if file_config.section_map == None:
        return response_make_simple_error_body(500, "Not found file config", None)

    '''
    Change the mode type to a matching number(802.11 b only -> 1, 802.11 g only -> 4 ...)
    '''
    request['mode'] = wireless_convert_mode_type_to_number(str(request['mode']))

    file_config.write_file_data(request, DELIMITER_EQUEL, FILE_HEADER_TEXT)

    '''
    Wireless Enable/Disable Processing
    '''
    wireless_module_restart(request['enable'], if_name, device_name)

    data = {
        'header': {
            'resultCode': 200,
            'resultMessage': 'Success.',
            'isSuccessful': 'true'
        }
    }
    return data

def wireless_get_device_info(ap_type):
    if_name = ""
    device_name = ""
    if_num = 0

    if ap_type == "5G_default":
        if_name = "rai0"
        device_name = FIVE_GIGA_DEVICE_NAME
        if_num = '0'

    elif ap_type == "2G_default":
        if_name = "ra0"
        device_name = TWO_GIGA_DEVICE_NAME
        if_num = '0'
    else:
        if "5G_guest" in ap_type:
            if_num = ap_type.split("t")[1]
            if_name = "rai" + str(if_num)
            device_name = FIVE_GIGA_DEVICE_NAME
        elif "2G_guest" in ap_type:
            if_num = ap_type.split("t")[1]
            device_name = TWO_GIGA_DEVICE_NAME
            if_name = "ra" + str(if_num)

    return if_name, device_name, int(if_num)

'''
Change to a value of a special data type. (input "z" ,data file type = a;b;c;d, --> data file type = a;z;c;d )
'''
def wireless_convert_to_spcific_data_type(config_file_name, req_key, req_val, if_num):

    file_config = ConfigFileProc(WIRELESS_COMMON_CONFIG, PATH_WIRELESS_MEDIATEK, config_file_name, if_num.replace("u", ""))
    file_data = file_config.get_file_data_section_map(DELIMITER_EQUEL)

    map_val = file_data[req_key]
    map_val_list = map_val[2].split(";")

    if len(map_val_list) > int(if_num):
        map_val_list[int(if_num)] = req_val

    apply_req_val = ";".join(map_val_list)

    return apply_req_val

'''
Change the mode type to a matching number(802.11 b only -> 1, 802.11 g only -> 4 ...)
'''
def wireless_convert_mode_type_to_number(mode_type):
    for i in mode_data.keys():
        if i == mode_type:
            mode_num = mode_data[mode_type]
            return mode_num

'''
Change the number to a matching mode type(1 -> 802.11 b only , 4 -> 802.11 g only...)
'''
def wireless_convert_number_to_mode_type(mode_num):
    for key,val in mode_data.items():
        if val == mode_num:
            return key


def wireless_module_restart(enable, ifname, devname):
    if os.path.exists(PROVISIONING_DONE_FILE):
        noti_data = dict()
        noti_data['enable'] = enable
        noti_data['ifname'] = ifname
        noti_data['devname'] = devname
        server_msg = ApServerLocalMassage(APNOTIFIER_CMD_PORT)
        server_msg.send_message_to_apnotifier(SAL_WIFI_MODULE_RESTART, noti_data)
        log_info(WIRELESS_COMMON_CONFIG, "** Send wifi module restart message to apClient **")
    else:
        log_info(WIRELESS_COMMON_CONFIG, "Cannot find provisioining file(%s)" % PROVISIONING_DONE_FILE)

def wireless_add_new_field(config_file_name, field_data_num):

    file_config = ConfigFileProc(WIRELESS_GENERATE_CONFIG, PATH_WIRELESS_MEDIATEK, config_file_name, field_data_num)
    field_data = file_config.section_map

    original_data = file_config.read_file_data(DELIMITER_EQUEL)

    for key, val in original_data.items():
        for field_key, field_val in field_data.items():
            if key == field_key:
                field_data[field_key][1] = val + ';' + field_data[field_key][0]

    bssid_num = int(file_config.read_file_data(DELIMITER_EQUEL)['BssidNum']) + 1
    field_data['BssidNum'][1] = str(bssid_num)

    for key, val in field_data.items():
        field_data[key] = val[1]

    log_info(WIRELESS_COMMON_CONFIG, "new_config_data : " + str(field_data))

    file_config.write_file_data(field_data,DELIMITER_EQUEL,FILE_HEADER_TEXT,False)

